{"ast":null,"code":"var _jsxFileName = \"/Users/i500577/Desktop/work/CoreUI-team/week-5/Todo-App-react/src/components/FilterList.js\";\nimport React, { useState } from \"react\";\nimport FilterButton from \"./FilterButton\";\nimport Todo from \"./Todo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FilterList(props) {\n  // const [tasks, setTasks] = useState(props.tasks);\n  // const [filter, setFilter] = useState('All');\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  console.log(FILTER_MAP);\n  console.log(filter);\n  console.log(tasks);\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this));\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  return FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this));\n}\n_c = FilterList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterList\");","map":{"version":3,"sources":["/Users/i500577/Desktop/work/CoreUI-team/week-5/Todo-App-react/src/components/FilterList.js"],"names":["React","useState","FilterButton","Todo","FilterList","props","FILTER_MAP","All","Active","task","completed","Completed","console","log","filter","tasks","FILTER_NAMES","Object","keys","taskList","map","id","name","toggleTaskCompleted","deleteTask","editTask","updatedTasks","setTasks","remainingTasks","newName","editedTaskList","setFilter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAGA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AACrC;AACA;AACA,QAAMC,UAAU,GAAG;AACnBC,IAAAA,GAAG,EAAE,MAAM,IADQ;AAEnBC,IAAAA,MAAM,EAAEC,IAAI,IAAI,CAACA,IAAI,CAACC,SAFH;AAGnBC,IAAAA,SAAS,EAAEF,IAAI,IAAIA,IAAI,CAACC;AAHL,GAAnB;AAKFE,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,QAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYZ,UAAZ,CAArB;AACA,QAAMa,QAAQ,GAAGJ,KAAK,CAACD,MAAN,CAAaR,UAAU,CAACQ,MAAD,CAAvB,EAChBM,GADgB,CACZX,IAAI,iBACT,QAAC,IAAD;AACC,IAAA,EAAE,EAAEA,IAAI,CAACY,EADV;AAEC,IAAA,IAAI,EAAEZ,IAAI,CAACa,IAFZ;AAGC,IAAA,SAAS,EAAEb,IAAI,CAACC,SAHjB;AAKC,IAAA,mBAAmB,EAAEa,mBALtB;AAMC,IAAA,UAAU,EAAEC,UANb;AAOC,IAAA,QAAQ,EAAEC;AAPX,KAIMhB,IAAI,CAACY,EAJX;AAAA;AAAA;AAAA;AAAA,UAFiB,CAAjB;;AAYA,WAASE,mBAAT,CAA6BF,EAA7B,EAAiC;AAC/B,UAAMK,YAAY,GAAGX,KAAK,CAACK,GAAN,CAAUX,IAAI,IAAI;AACrC;AACA,UAAIY,EAAE,KAAKZ,IAAI,CAACY,EAAhB,EAAoB;AAClB;AACA;AACA,eAAO,EAAC,GAAGZ,IAAJ;AAAUC,UAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAA3B,SAAP;AACD;;AACD,aAAOD,IAAP;AACD,KARoB,CAArB;AASAkB,IAAAA,QAAQ,CAACD,YAAD,CAAR;AACD;;AAED,WAASF,UAAT,CAAoBH,EAApB,EAAwB;AACtB,UAAMO,cAAc,GAAGb,KAAK,CAACD,MAAN,CAAaL,IAAI,IAAIY,EAAE,KAAKZ,IAAI,CAACY,EAAjC,CAAvB;AACAM,IAAAA,QAAQ,CAACC,cAAD,CAAR;AACD;;AAED,WAASH,QAAT,CAAkBJ,EAAlB,EAAsBQ,OAAtB,EAA+B;AAC7B,UAAMC,cAAc,GAAGf,KAAK,CAACK,GAAN,CAAUX,IAAI,IAAI;AACzC;AACE,UAAIY,EAAE,KAAKZ,IAAI,CAACY,EAAhB,EAAoB;AAClB;AACA,eAAO,EAAC,GAAGZ,IAAJ;AAAUa,UAAAA,IAAI,EAAEO;AAAhB,SAAP;AACD;;AACD,aAAOpB,IAAP;AACD,KAPsB,CAAvB;AAQAkB,IAAAA,QAAQ,CAACG,cAAD,CAAR;AACH;;AACC,SACEd,YAAY,CAACI,GAAb,CAAiBE,IAAI,iBACrB,QAAC,YAAD;AAEE,IAAA,IAAI,EAAEA,IAFR;AAGE,IAAA,SAAS,EAAEA,IAAI,KAAKR,MAHtB;AAIE,IAAA,SAAS,EAAEiB;AAJb,KACOT,IADP;AAAA;AAAA;AAAA;AAAA,UADA,CADF;AASD;KA9DuBlB,U","sourcesContent":["import React, { useState } from \"react\";\nimport FilterButton from \"./FilterButton\";\nimport Todo from \"./Todo\";\n\n\nexport default function FilterList(props){\n    // const [tasks, setTasks] = useState(props.tasks);\n    // const [filter, setFilter] = useState('All');\n    const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  console.log(FILTER_MAP);\n  console.log(filter);\n  console.log(tasks);\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  const taskList = tasks.filter(FILTER_MAP[filter])\n  .map(task => (\n  <Todo\n   id={task.id}\n   name={task.name}\n   completed={task.completed}\n   key={task.id}\n   toggleTaskCompleted={toggleTaskCompleted}\n   deleteTask={deleteTask}\n   editTask={editTask}\n  />\n  ));\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n} \n  return (\n    FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n    )))\n}\n\n\n"]},"metadata":{},"sourceType":"module"}
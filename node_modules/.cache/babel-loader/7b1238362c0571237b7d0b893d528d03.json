{"ast":null,"code":"var _jsxFileName = \"/Users/i500577/Desktop/work/CoreUI-team/week-5/moz-todo-react/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Todo from \"./Todo\";\nimport FilterButton from \"./FilterButton\";\nimport { routes } from \"./routes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nexport const FILTER_NAMES = Object.keys(FILTER_MAP);\n_c = FILTER_NAMES;\nexport function Main(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 1\n  }, this));\n} // export const [tasks, setTasks] = useState(props.tasks);\n\n_s(Main, \"EeRnFHbkPD5i3v9CpmwzSMi80Ig=\");\n\n_c2 = Main;\nexport const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n  id: task.id,\n  name: task.name,\n  completed: task.completed,\n  toggleTaskCompleted: toggleTaskCompleted,\n  deleteTask: deleteTask,\n  editTask: editTask\n}, task.id, false, {\n  fileName: _jsxFileName,\n  lineNumber: 38,\n  columnNumber: 1\n}, this));\nexport const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n  name: name,\n  isPressed: name === filter,\n  setFilter: setFilter\n}, name, false, {\n  fileName: _jsxFileName,\n  lineNumber: 50,\n  columnNumber: 5\n}, this));\nexport function addTask(name) {\n  const newTask = {\n    id: \"todo-\" + nanoid(),\n    name: name,\n    completed: false\n  };\n  setTasks([...tasks, newTask]);\n}\nexport function toggleTaskCompleted(id) {\n  const updatedTasks = tasks.map(task => {\n    // if this task has the same ID as the edited task\n    if (id === task.id) {\n      // use object spread to make a new object\n      // whose `completed` prop has been inverted\n      return { ...task,\n        completed: !task.completed\n      };\n    }\n\n    return task;\n  });\n  setTasks(updatedTasks);\n}\nexport function deleteTask(id) {\n  const remainingTasks = tasks.filter(task => id !== task.id);\n  setTasks(remainingTasks);\n}\nexport function editTask(id, newName) {\n  const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n    if (id === task.id) {\n      //\n      return { ...task,\n        name: newName\n      };\n    }\n\n    return task;\n  });\n  setTasks(editedTaskList);\n}\nexport function ListFiltered(filterList) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"filters btn-group stack-exception\",\n    children: filterList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n_c3 = ListFiltered;\nexport function ListOfTasks(taskList) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), routes]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_c4 = ListOfTasks;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"FILTER_NAMES\");\n$RefreshReg$(_c2, \"Main\");\n$RefreshReg$(_c3, \"ListFiltered\");\n$RefreshReg$(_c4, \"ListOfTasks\");","map":{"version":3,"sources":["/Users/i500577/Desktop/work/CoreUI-team/week-5/moz-todo-react/src/components/Main.js"],"names":["React","useState","Todo","FilterButton","routes","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","Main","props","tasks","setTasks","filter","setFilter","taskList","map","id","name","toggleTaskCompleted","deleteTask","editTask","filterList","addTask","newTask","nanoid","updatedTasks","remainingTasks","newName","editedTaskList","ListFiltered","ListOfTasks"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Todo from \"./Todo\";\nimport FilterButton from \"./FilterButton\";\nimport { routes }  from \"./routes\";\n\nexport const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n\nexport const FILTER_NAMES = Object.keys(FILTER_MAP);\n\nexport function Main(props){\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n  const taskList = tasks\n.filter(FILTER_MAP[filter])\n.map(task => (\n<Todo\n  id={task.id}\n  name={task.name}\n  completed={task.completed}\n  key={task.id}\n  toggleTaskCompleted={toggleTaskCompleted}\n  deleteTask={deleteTask}\n  editTask={editTask}\n/>\n));\n\n}\n// export const [tasks, setTasks] = useState(props.tasks);\n\n\nexport const taskList = tasks\n.filter(FILTER_MAP[filter])\n.map(task => (\n<Todo\n  id={task.id}\n  name={task.name}\n  completed={task.completed}\n  key={task.id}\n  toggleTaskCompleted={toggleTaskCompleted}\n  deleteTask={deleteTask}\n  editTask={editTask}\n/>\n));\n\nexport const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\nexport function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\nexport function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\nexport function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\nexport function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n}\n\nexport function ListFiltered(filterList){\n    return(\n        <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n    );\n}\n\nexport function ListOfTasks(taskList){\n  return(\n    <div className=\"main\">\n      <ul\n      role=\"list\"\n      className=\"todo-list stack-large stack-exception\"\n      aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n        {routes}\n      </div>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}
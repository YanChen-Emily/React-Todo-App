{"ast":null,"code":"var _jsxFileName = \"/Users/i500577/Desktop/work/CoreUI-team/week-5/Todo-App-react/src/components/FilterList.js\";\nimport React, { useState } from \"react\";\nimport FilterButton from \"./FilterButton\";\nimport Todo from \"./Todo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FilterList(props) {\n  // const [tasks, setTasks] = useState(props.tasks);\n  // const [filter, setFilter] = useState('All');\n  const {\n    tasks,\n    setFilter,\n    filter\n  } = props;\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  console.log(FILTER_MAP);\n  console.log(filter);\n  console.log(tasks);\n  const FILTER_NAMES = Object.keys(FILTER_MAP); //   const taskList = tasks.filter(FILTER_MAP[filter])\n  //   .map(task => (\n  //   <Todo\n  //    id={task.id}\n  //    name={task.name}\n  //    completed={task.completed}\n  //    key={task.id}\n  //    toggleTaskCompleted={toggleTaskCompleted}\n  //    deleteTask={deleteTask}\n  //    editTask={editTask}\n  //   />\n  //   ));\n  //   function toggleTaskCompleted(id) {\n  //     const updatedTasks = tasks.map(task => {\n  //       // if this task has the same ID as the edited task\n  //       if (id === task.id) {\n  //         // use object spread to make a new object\n  //         // whose `completed` prop has been inverted\n  //         return {...task, completed: !task.completed}\n  //       }\n  //       return task;\n  //     });\n  //     setTasks(updatedTasks);\n  //   }\n  //   function deleteTask(id) {\n  //     const remainingTasks = tasks.filter(task => id !== task.id);\n  //     setTasks(remainingTasks);\n  //   }\n  //   function editTask(id, newName) {\n  //     const editedTaskList = tasks.map(task => {\n  //     // if this task has the same ID as the edited task\n  //       if (id === task.id) {\n  //         //\n  //         return {...task, name: newName}\n  //       }\n  //       return task;\n  //     });\n  //     setTasks(editedTaskList);\n  // }\n\n  function clickHandler(filter) {\n    setFilter(filter);\n    console.log(filter);\n  }\n\n  return FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter //   setFilter={setFilter}\n    ,\n    setFilter: () => clickHandler(name)\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this));\n}\n_c = FilterList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterList\");","map":{"version":3,"sources":["/Users/i500577/Desktop/work/CoreUI-team/week-5/Todo-App-react/src/components/FilterList.js"],"names":["React","useState","FilterButton","Todo","FilterList","props","tasks","setFilter","filter","FILTER_MAP","All","Active","task","completed","Completed","console","log","FILTER_NAMES","Object","keys","clickHandler","map","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAGA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AACrC;AACA;AACA,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA;AAAnB,MAA6BH,KAAnC;AACA,QAAMI,UAAU,GAAG;AACnBC,IAAAA,GAAG,EAAE,MAAM,IADQ;AAEnBC,IAAAA,MAAM,EAAEC,IAAI,IAAI,CAACA,IAAI,CAACC,SAFH;AAGnBC,IAAAA,SAAS,EAAEF,IAAI,IAAIA,IAAI,CAACC;AAHL,GAAnB;AAKFE,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACA,QAAMW,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYV,UAAZ,CAArB,CAZuC,CAazC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAASW,YAAT,CAAsBZ,MAAtB,EAA6B;AACzBD,IAAAA,SAAS,CAACC,MAAD,CAAT;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACH;;AACC,SACES,YAAY,CAACI,GAAb,CAAiBC,IAAI,iBACrB,QAAC,YAAD;AAEE,IAAA,IAAI,EAAEA,IAFR;AAGE,IAAA,SAAS,EAAEA,IAAI,KAAKd,MAHtB,CAIA;AAJA;AAKE,IAAA,SAAS,EAAE,MAAIY,YAAY,CAACE,IAAD;AAL7B,KACOA,IADP;AAAA;AAAA;AAAA;AAAA,UADA,CADF;AAUD;KApEuBlB,U","sourcesContent":["import React, { useState } from \"react\";\nimport FilterButton from \"./FilterButton\";\nimport Todo from \"./Todo\";\n\n\nexport default function FilterList(props){\n    // const [tasks, setTasks] = useState(props.tasks);\n    // const [filter, setFilter] = useState('All');\n    const {tasks, setFilter, filter} = props;\n    const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  console.log(FILTER_MAP);\n  console.log(filter);\n  console.log(tasks);\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n//   const taskList = tasks.filter(FILTER_MAP[filter])\n//   .map(task => (\n//   <Todo\n//    id={task.id}\n//    name={task.name}\n//    completed={task.completed}\n//    key={task.id}\n//    toggleTaskCompleted={toggleTaskCompleted}\n//    deleteTask={deleteTask}\n//    editTask={editTask}\n//   />\n//   ));\n//   function toggleTaskCompleted(id) {\n//     const updatedTasks = tasks.map(task => {\n//       // if this task has the same ID as the edited task\n//       if (id === task.id) {\n//         // use object spread to make a new object\n//         // whose `completed` prop has been inverted\n//         return {...task, completed: !task.completed}\n//       }\n//       return task;\n//     });\n//     setTasks(updatedTasks);\n//   }\n\n//   function deleteTask(id) {\n//     const remainingTasks = tasks.filter(task => id !== task.id);\n//     setTasks(remainingTasks);\n//   }\n\n//   function editTask(id, newName) {\n//     const editedTaskList = tasks.map(task => {\n//     // if this task has the same ID as the edited task\n//       if (id === task.id) {\n//         //\n//         return {...task, name: newName}\n//       }\n//       return task;\n//     });\n//     setTasks(editedTaskList);\n// }\nfunction clickHandler(filter){\n    setFilter(filter);\n    console.log(filter);\n} \n  return (\n    FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n    //   setFilter={setFilter}\n      setFilter={()=>clickHandler(name)}\n    />\n    )))\n}\n\n\n"]},"metadata":{},"sourceType":"module"}
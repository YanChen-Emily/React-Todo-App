{"ast":null,"code":"var _jsxFileName = \"/Users/i500577/Desktop/work/CoreUI-team/week-5/Todo-App-react/src/components/TaskList.js\";\nimport React, { useState } from \"react\";\nimport Todo from \"./Todo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskList = props => {\n  const {\n    tasks,\n    setTasks,\n    filter\n  } = props;\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  return tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this));\n};\n_c = TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/Users/i500577/Desktop/work/CoreUI-team/week-5/Todo-App-react/src/components/TaskList.js"],"names":["React","useState","Todo","TaskList","props","tasks","setTasks","filter","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","toggleTaskCompleted","id","updatedTasks","map","deleteTask","remainingTasks","editTask","newName","editedTaskList","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,OAAO,MAAMC,QAAQ,GAAEC,KAAD,IAAS;AAC3B,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAiBC,IAAAA;AAAjB,MAA2BH,KAAjC;AACA,QAAMI,UAAU,GAAG;AACfC,IAAAA,GAAG,EAAE,MAAM,IADI;AAEfC,IAAAA,MAAM,EAAEC,IAAI,IAAI,CAACA,IAAI,CAACC,SAFP;AAGfC,IAAAA,SAAS,EAAEF,IAAI,IAAIA,IAAI,CAACC;AAHT,GAAnB;AAKA,QAAME,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYR,UAAZ,CAArB;;AAEA,WAASS,mBAAT,CAA6BC,EAA7B,EAAiC;AAC7B,UAAMC,YAAY,GAAGd,KAAK,CAACe,GAAN,CAAUT,IAAI,IAAI;AACrC,UAAIO,EAAE,KAAKP,IAAI,CAACO,EAAhB,EAAoB;AAClB,eAAO,EAAC,GAAGP,IAAJ;AAAUC,UAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAA3B,SAAP;AACD;;AACD,aAAOD,IAAP;AACD,KALoB,CAArB;AAMAL,IAAAA,QAAQ,CAACa,YAAD,CAAR;AACD;;AAED,WAASE,UAAT,CAAoBH,EAApB,EAAwB;AACtB,UAAMI,cAAc,GAAGjB,KAAK,CAACE,MAAN,CAAaI,IAAI,IAAIO,EAAE,KAAKP,IAAI,CAACO,EAAjC,CAAvB;AACAZ,IAAAA,QAAQ,CAACgB,cAAD,CAAR;AACD;;AAED,WAASC,QAAT,CAAkBL,EAAlB,EAAsBM,OAAtB,EAA+B;AAC7B,UAAMC,cAAc,GAAGpB,KAAK,CAACe,GAAN,CAAUT,IAAI,IAAI;AACvC,UAAIO,EAAE,KAAKP,IAAI,CAACO,EAAhB,EAAoB;AAClB;AACA,eAAO,EAAC,GAAGP,IAAJ;AAAUe,UAAAA,IAAI,EAAEF;AAAhB,SAAP;AACD;;AACD,aAAOb,IAAP;AACD,KANsB,CAAvB;AAOAL,IAAAA,QAAQ,CAACmB,cAAD,CAAR;AACH;;AAED,SAAOpB,KAAK,CAACE,MAAN,CAAaC,UAAU,CAACD,MAAD,CAAvB,EACNa,GADM,CACFT,IAAI,iBACT,QAAC,IAAD;AACC,IAAA,EAAE,EAAEA,IAAI,CAACO,EADV;AAEC,IAAA,IAAI,EAAEP,IAAI,CAACe,IAFZ;AAGC,IAAA,SAAS,EAAEf,IAAI,CAACC,SAHjB;AAKC,IAAA,mBAAmB,EAAEK,mBALtB;AAMC,IAAA,UAAU,EAAEI,UANb;AAOC,IAAA,QAAQ,EAAEE;AAPX,KAIMZ,IAAI,CAACO,EAJX;AAAA;AAAA;AAAA;AAAA,UAFO,CAAP;AAYH,CA/CM;KAAMf,Q","sourcesContent":["import React, { useState } from \"react\";\nimport Todo from \"./Todo\";\n\nexport const TaskList=(props)=>{\n    const {tasks, setTasks,filter} = props;\n    const FILTER_MAP = {\n        All: () => true,\n        Active: task => !task.completed,\n        Completed: task => task.completed\n      };\n    const FILTER_NAMES = Object.keys(FILTER_MAP);\n\n    function toggleTaskCompleted(id) {\n        const updatedTasks = tasks.map(task => {\n          if (id === task.id) {\n            return {...task, completed: !task.completed}\n          }\n          return task;\n        });\n        setTasks(updatedTasks);\n      }\n  \n      function deleteTask(id) {\n        const remainingTasks = tasks.filter(task => id !== task.id);\n        setTasks(remainingTasks);\n      }\n  \n      function editTask(id, newName) {\n        const editedTaskList = tasks.map(task => {\n          if (id === task.id) {\n            //\n            return {...task, name: newName}\n          }\n          return task;\n        });\n        setTasks(editedTaskList);\n    } \n  \n    return(tasks.filter(FILTER_MAP[filter])\n    .map(task => (\n    <Todo\n     id={task.id}\n     name={task.name}\n     completed={task.completed}\n     key={task.id}\n     toggleTaskCompleted={toggleTaskCompleted}\n     deleteTask={deleteTask}\n     editTask={editTask}\n    />\n    )))\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/i500577/Desktop/work/CoreUI-team/week-5/Todo-App-react/src/components/FilterList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport FilterButton from \"./FilterButton\";\nimport Todo from \"./Todo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FilterList(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this));\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  return FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this));\n}\n\n_s(FilterList, \"EeRnFHbkPD5i3v9CpmwzSMi80Ig=\");\n\n_c = FilterList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterList\");","map":{"version":3,"sources":["/Users/i500577/Desktop/work/CoreUI-team/week-5/Todo-App-react/src/components/FilterList.js"],"names":["React","useState","FilterButton","Todo","FilterList","props","tasks","setTasks","filter","setFilter","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","taskList","map","id","name","toggleTaskCompleted","deleteTask","editTask","updatedTasks","remainingTasks","newName","editedTaskList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAIA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AAAA;;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAACI,KAAK,CAACC,KAAP,CAAlC;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMS,UAAU,GAAG;AACnBC,IAAAA,GAAG,EAAE,MAAM,IADQ;AAEnBC,IAAAA,MAAM,EAAEC,IAAI,IAAI,CAACA,IAAI,CAACC,SAFH;AAGnBC,IAAAA,SAAS,EAAEF,IAAI,IAAIA,IAAI,CAACC;AAHL,GAAnB;AAKF,QAAME,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYR,UAAZ,CAArB;AACA,QAAMS,QAAQ,GAAGb,KAAK,CAACE,MAAN,CAAaE,UAAU,CAACF,MAAD,CAAvB,EAChBY,GADgB,CACZP,IAAI,iBACT,QAAC,IAAD;AACC,IAAA,EAAE,EAAEA,IAAI,CAACQ,EADV;AAEC,IAAA,IAAI,EAAER,IAAI,CAACS,IAFZ;AAGC,IAAA,SAAS,EAAET,IAAI,CAACC,SAHjB;AAKC,IAAA,mBAAmB,EAAES,mBALtB;AAMC,IAAA,UAAU,EAAEC,UANb;AAOC,IAAA,QAAQ,EAAEC;AAPX,KAIMZ,IAAI,CAACQ,EAJX;AAAA;AAAA;AAAA;AAAA,UAFiB,CAAjB;;AAYA,WAASE,mBAAT,CAA6BF,EAA7B,EAAiC;AAC/B,UAAMK,YAAY,GAAGpB,KAAK,CAACc,GAAN,CAAUP,IAAI,IAAI;AACrC;AACA,UAAIQ,EAAE,KAAKR,IAAI,CAACQ,EAAhB,EAAoB;AAClB;AACA;AACA,eAAO,EAAC,GAAGR,IAAJ;AAAUC,UAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAA3B,SAAP;AACD;;AACD,aAAOD,IAAP;AACD,KARoB,CAArB;AASAN,IAAAA,QAAQ,CAACmB,YAAD,CAAR;AACD;;AAED,WAASF,UAAT,CAAoBH,EAApB,EAAwB;AACtB,UAAMM,cAAc,GAAGrB,KAAK,CAACE,MAAN,CAAaK,IAAI,IAAIQ,EAAE,KAAKR,IAAI,CAACQ,EAAjC,CAAvB;AACAd,IAAAA,QAAQ,CAACoB,cAAD,CAAR;AACD;;AAED,WAASF,QAAT,CAAkBJ,EAAlB,EAAsBO,OAAtB,EAA+B;AAC7B,UAAMC,cAAc,GAAGvB,KAAK,CAACc,GAAN,CAAUP,IAAI,IAAI;AACzC;AACE,UAAIQ,EAAE,KAAKR,IAAI,CAACQ,EAAhB,EAAoB;AAClB;AACA,eAAO,EAAC,GAAGR,IAAJ;AAAUS,UAAAA,IAAI,EAAEM;AAAhB,SAAP;AACD;;AACD,aAAOf,IAAP;AACD,KAPsB,CAAvB;AAQAN,IAAAA,QAAQ,CAACsB,cAAD,CAAR;AACH;;AACC,SACEb,YAAY,CAACI,GAAb,CAAiBE,IAAI,iBACrB,QAAC,YAAD;AAEE,IAAA,IAAI,EAAEA,IAFR;AAGE,IAAA,SAAS,EAAEA,IAAI,KAAKd,MAHtB;AAIE,IAAA,SAAS,EAAEC;AAJb,KACOa,IADP;AAAA;AAAA;AAAA;AAAA,UADA,CADF;AAUD;;GA5DuBlB,U;;KAAAA,U","sourcesContent":["import React, { useState } from \"react\";\nimport FilterButton from \"./FilterButton\";\nimport Todo from \"./Todo\";\n\n\n\nexport default function FilterList(props){\n    const [tasks, setTasks] = useState(props.tasks);\n    const [filter, setFilter] = useState('All');\n    const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  const taskList = tasks.filter(FILTER_MAP[filter])\n  .map(task => (\n  <Todo\n   id={task.id}\n   name={task.name}\n   completed={task.completed}\n   key={task.id}\n   toggleTaskCompleted={toggleTaskCompleted}\n   deleteTask={deleteTask}\n   editTask={editTask}\n  />\n  ));\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n} \n  return (\n    FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n    ))\n    )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/i500577/Desktop/work/CoreUI-team/week-5/Todo-App-react/src/components/Main.js\";\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nexport const FILTER_NAMES = Object.keys(FILTER_MAP);\n_c = FILTER_NAMES;\nexport function addTask(tasks, name) {\n  const newTask = {\n    id: \"todo-\" + nanoid(),\n    name: name,\n    completed: false\n  };\n  setTasks([...tasks, newTask]);\n}\nexport function toggleTaskCompleted(tasks, setTasks, id) {\n  const updatedTasks = tasks.map(task => {\n    // if this task has the same ID as the edited task\n    if (id === task.id) {\n      // use object spread to make a new object\n      // whose `completed` prop has been inverted\n      return { ...task,\n        completed: !task.completed\n      };\n    }\n\n    return task;\n  });\n  setTasks(updatedTasks);\n}\nexport function deleteTask(tasks, setTasks, id) {\n  const remainingTasks = tasks.filter(task => id !== task.id);\n  setTasks(remainingTasks);\n}\nexport function editTask(tasks, setTasks, id, newName) {\n  const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n    if (id === task.id) {\n      //\n      return { ...task,\n        name: newName\n      };\n    }\n\n    return task;\n  });\n  setTasks(editedTaskList);\n}\nexport const Home = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"You are in Home page\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n_c2 = Home;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FILTER_NAMES\");\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"sources":["/Users/i500577/Desktop/work/CoreUI-team/week-5/Todo-App-react/src/components/Main.js"],"names":["React","useState","nanoid","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","addTask","tasks","name","newTask","id","setTasks","toggleTaskCompleted","updatedTasks","map","deleteTask","remainingTasks","filter","editTask","newName","editedTaskList","Home"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,OAAO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,GAAG,EAAE,MAAM,IADa;AAExBC,EAAAA,MAAM,EAAEC,IAAI,IAAI,CAACA,IAAI,CAACC,SAFE;AAGxBC,EAAAA,SAAS,EAAEF,IAAI,IAAIA,IAAI,CAACC;AAHA,CAAnB;AAMP,OAAO,MAAME,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYR,UAAZ,CAArB;KAAMM,Y;AAEb,OAAO,SAASG,OAAT,CAAiBC,KAAjB,EAAwBC,IAAxB,EAA8B;AACjC,QAAMC,OAAO,GAAG;AAAEC,IAAAA,EAAE,EAAE,UAAUd,MAAM,EAAtB;AAA0BY,IAAAA,IAAI,EAAEA,IAAhC;AAAsCP,IAAAA,SAAS,EAAE;AAAjD,GAAhB;AACAU,EAAAA,QAAQ,CAAC,CAAC,GAAGJ,KAAJ,EAAWE,OAAX,CAAD,CAAR;AACD;AAEH,OAAO,SAASG,mBAAT,CAA6BL,KAA7B,EAAoCI,QAApC,EAA8CD,EAA9C,EAAkD;AACrD,QAAMG,YAAY,GAAGN,KAAK,CAACO,GAAN,CAAUd,IAAI,IAAI;AACrC;AACA,QAAIU,EAAE,KAAKV,IAAI,CAACU,EAAhB,EAAoB;AAClB;AACA;AACA,aAAO,EAAC,GAAGV,IAAJ;AAAUC,QAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAA3B,OAAP;AACD;;AACD,WAAOD,IAAP;AACD,GARoB,CAArB;AASAW,EAAAA,QAAQ,CAACE,YAAD,CAAR;AACD;AAEH,OAAO,SAASE,UAAT,CAAoBR,KAApB,EAA2BI,QAA3B,EAAoCD,EAApC,EAAwC;AAC3C,QAAMM,cAAc,GAAGT,KAAK,CAACU,MAAN,CAAajB,IAAI,IAAIU,EAAE,KAAKV,IAAI,CAACU,EAAjC,CAAvB;AACAC,EAAAA,QAAQ,CAACK,cAAD,CAAR;AACD;AAEH,OAAO,SAASE,QAAT,CAAkBX,KAAlB,EAAyBI,QAAzB,EAAmCD,EAAnC,EAAuCS,OAAvC,EAAgD;AACnD,QAAMC,cAAc,GAAGb,KAAK,CAACO,GAAN,CAAUd,IAAI,IAAI;AACzC;AACE,QAAIU,EAAE,KAAKV,IAAI,CAACU,EAAhB,EAAoB;AAClB;AACA,aAAO,EAAC,GAAGV,IAAJ;AAAUQ,QAAAA,IAAI,EAAEW;AAAhB,OAAP;AACD;;AACD,WAAOnB,IAAP;AACD,GAPsB,CAAvB;AAQAW,EAAAA,QAAQ,CAACS,cAAD,CAAR;AACH;AAED,OAAO,MAAMC,IAAI,GAAG,MAAM;AACxB,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFM;MAAMA,I","sourcesContent":["import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nexport const FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nexport const FILTER_NAMES = Object.keys(FILTER_MAP);\n\nexport function addTask(tasks, name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\nexport function toggleTaskCompleted(tasks, setTasks, id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  \nexport function deleteTask(tasks, setTasks,id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n  \nexport function editTask(tasks, setTasks, id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n} \n\nexport const Home = () => {\n  return <div>You are in Home page</div>\n}\n\n"]},"metadata":{},"sourceType":"module"}
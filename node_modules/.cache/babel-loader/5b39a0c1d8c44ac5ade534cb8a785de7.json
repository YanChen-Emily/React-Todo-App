{"ast":null,"code":"var _jsxFileName = \"/Users/i500577/Desktop/work/CoreUI-team/week-5/moz-todo-react/src/components/Main.js\";\nimport React, { useState } from \"react\"; // import Todo from \"./Todo\";\n// import FilterButton from \"./FilterButton\";\n// import { routes }  from \"./routes\";\n\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function addTask(tasks, setTasks, name) {\n  const newTask = {\n    id: \"todo-\" + nanoid(),\n    name: name,\n    completed: false\n  };\n  setTasks([...tasks, newTask]);\n}\nexport function toggleTaskCompleted(tasks, setTasks, id) {\n  const updatedTasks = tasks.map(task => {\n    // if this task has the same ID as the edited task\n    if (id === task.id) {\n      // use object spread to make a new object\n      // whose `completed` prop has been inverted\n      return { ...task,\n        completed: !task.completed\n      };\n    }\n\n    return task;\n  });\n  setTasks(updatedTasks);\n}\nexport function deleteTask(tasks, setTasks, id) {\n  const remainingTasks = tasks.filter(task => id !== task.id);\n  setTasks(remainingTasks);\n}\nexport function editTask(tasks, setTasks, id, newName) {\n  const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n    if (id === task.id) {\n      //\n      return { ...task,\n        name: newName\n      };\n    }\n\n    return task;\n  });\n  setTasks(editedTaskList);\n}\nexport const Home = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"You are in Home page\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n};\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/i500577/Desktop/work/CoreUI-team/week-5/moz-todo-react/src/components/Main.js"],"names":["React","useState","nanoid","addTask","tasks","setTasks","name","newTask","id","completed","toggleTaskCompleted","updatedTasks","map","task","deleteTask","remainingTasks","filter","editTask","newName","editedTaskList","Home"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;AACA;AACA;;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,QAAxB,EAAkCC,IAAlC,EAAwC;AAC3C,QAAMC,OAAO,GAAG;AAAEC,IAAAA,EAAE,EAAE,UAAUN,MAAM,EAAtB;AAA0BI,IAAAA,IAAI,EAAEA,IAAhC;AAAsCG,IAAAA,SAAS,EAAE;AAAjD,GAAhB;AACAJ,EAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWG,OAAX,CAAD,CAAR;AACD;AAEH,OAAO,SAASG,mBAAT,CAA6BN,KAA7B,EAAoCC,QAApC,EAA8CG,EAA9C,EAAkD;AACrD,QAAMG,YAAY,GAAGP,KAAK,CAACQ,GAAN,CAAUC,IAAI,IAAI;AACrC;AACA,QAAIL,EAAE,KAAKK,IAAI,CAACL,EAAhB,EAAoB;AAClB;AACA;AACA,aAAO,EAAC,GAAGK,IAAJ;AAAUJ,QAAAA,SAAS,EAAE,CAACI,IAAI,CAACJ;AAA3B,OAAP;AACD;;AACD,WAAOI,IAAP;AACD,GARoB,CAArB;AASAR,EAAAA,QAAQ,CAACM,YAAD,CAAR;AACD;AAEH,OAAO,SAASG,UAAT,CAAoBV,KAApB,EAA2BC,QAA3B,EAAoCG,EAApC,EAAwC;AAC3C,QAAMO,cAAc,GAAGX,KAAK,CAACY,MAAN,CAAaH,IAAI,IAAIL,EAAE,KAAKK,IAAI,CAACL,EAAjC,CAAvB;AACAH,EAAAA,QAAQ,CAACU,cAAD,CAAR;AACD;AAEH,OAAO,SAASE,QAAT,CAAkBb,KAAlB,EAAyBC,QAAzB,EAAmCG,EAAnC,EAAuCU,OAAvC,EAAgD;AACnD,QAAMC,cAAc,GAAGf,KAAK,CAACQ,GAAN,CAAUC,IAAI,IAAI;AACzC;AACE,QAAIL,EAAE,KAAKK,IAAI,CAACL,EAAhB,EAAoB;AAClB;AACA,aAAO,EAAC,GAAGK,IAAJ;AAAUP,QAAAA,IAAI,EAAEY;AAAhB,OAAP;AACD;;AACD,WAAOL,IAAP;AACD,GAPsB,CAAvB;AAQAR,EAAAA,QAAQ,CAACc,cAAD,CAAR;AACH;AAED,OAAO,MAAMC,IAAI,GAAG,MAAM;AACxB,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFM;KAAMA,I","sourcesContent":["import React, { useState } from \"react\";\n// import Todo from \"./Todo\";\n// import FilterButton from \"./FilterButton\";\n// import { routes }  from \"./routes\";\nimport { nanoid } from \"nanoid\";\n\nexport function addTask(tasks, setTasks, name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\nexport function toggleTaskCompleted(tasks, setTasks, id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  \nexport function deleteTask(tasks, setTasks,id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n  \nexport function editTask(tasks, setTasks, id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n} \n\nexport const Home = () => {\n  return <div>You are in Home page</div>\n}\n\n"]},"metadata":{},"sourceType":"module"}